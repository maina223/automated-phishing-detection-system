[1mdiff --git a/.gitignore b/.gitignore[m
[1mdeleted file mode 100644[m
[1mindex 8b137891..00000000[m
[1m--- a/.gitignore[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 00000000..664fd170[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m# automated-phishing_detection-system[m
\ No newline at end of file[m
[1mdiff --git a/automated/asgi.py b/automated/asgi.py[m
[1mdeleted file mode 100644[m
[1mindex 4557cb6a..00000000[m
[1m--- a/automated/asgi.py[m
[1m+++ /dev/null[m
[36m@@ -1,15 +0,0 @@[m
[31m-"""[m
[31m-ASGI config for automated project.[m
[31m-[m
[31m-It exposes the ASGI callable as a module-level variable named ``application``.[m
[31m-[m
[31m-For more information on this file, see[m
[31m-https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/[m
[31m-"""[m
[31m-[m
[31m-import os[m
[31m-from django.core.asgi import get_asgi_application[m
[31m-[m
[31m-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'automated.settings')[m
[31m-[m
[31m-application = get_asgi_application()[m
[1mdiff --git a/automated/celery.py b/automated/celery.py[m
[1mdeleted file mode 100644[m
[1mindex cff76a45..00000000[m
[1m--- a/automated/celery.py[m
[1m+++ /dev/null[m
[36m@@ -1,13 +0,0 @@[m
[31m-import os[m
[31m-from celery import Celery[m
[31m-[m
[31m-os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'automated.settings')[m
[31m-[m
[31m-app = Celery('automated')[m
[31m-[m
[31m-# Load task modules from all registered Django app configs.[m
[31m-app.config_from_object('django.conf:settings', namespace='CELERY')[m
[31m-app.conf.broker_connection_retry_on_startup = True[m
[31m-[m
[31m-# Auto-discover tasks in installed apps[m
[31m-app.autodiscover_tasks()[m
[1mdiff --git a/automated/email_imapclient.py b/automated/email_imapclient.py[m
[1mdeleted file mode 100644[m
[1mindex fb810722..00000000[m
[1m--- a/automated/email_imapclient.py[m
[1m+++ /dev/null[m
[36m@@ -1,84 +0,0 @@[m
[31m-import imaplib[m
[31m-import email[m
[31m-from email.header import decode_header[m
[31m-import os[m
[31m-import re[m
[31m-[m
[31m-# IMAP Server Configuration[m
[31m-IMAP_SERVER = 'imap.gmail.com'  # Change for your email provider[m
[31m-IMAP_PORT = 993[m
[31m-EMAIL_USER = 'mariana@gmail.com'[m
[31m-EMAIL_PASS = '123456'[m
[31m-[m
[31m-def connect_imap():[m
[31m-    """Connect to the IMAP server and log in."""[m
[31m-    mail = imaplib.IMAP4_SSL(IMAP_SERVER, IMAP_PORT)[m
[31m-    mail.login(EMAIL_USER, EMAIL_PASS)[m
[31m-    mail.select("inbox")  # Select inbox[m
[31m-    return mail[m
[31m-[m
[31m-def decode_mime_words(encoded_str):[m
[31m-    """Decode MIME words (e.g., subject or sender) in email headers."""[m
[31m-    decoded_words, encoding = decode_header(encoded_str)[0][m
[31m-    if isinstance(decoded_words, bytes):[m
[31m-        return decoded_words.decode(encoding or 'utf-8')[m
[31m-    return decoded_words[m
[31m-[m
[31m-def detect_phishing(body, sender):[m
[31m-    """Basic phishing detection using regex and keywords."""[m
[31m-    phishing_keywords = ['urgent action', 'verify your account', 'account suspension', 'immediate action required'][m
[31m-    suspicious_urls = ['bit.ly', 'goo.gl', 'paypal.com.secure'][m
[31m-[m
[31m-    # Check for suspicious keywords in email body[m
[31m-    if any(keyword in body.lower() for keyword in phishing_keywords):[m
[31m-        return True[m
[31m-[m
[31m-    # Check for suspicious sender domain[m
[31m-    if 'suspiciousdomain.com' in sender.lower():[m
[31m-        return True[m
[31m-[m
[31m-    # Check for suspicious URLs[m
[31m-    if any(url in body for url in suspicious_urls):[m
[31m-        return True[m
[31m-[m
[31m-    return False[m
[31m-[m
[31m-def fetch_emails():[m
[31m-    """Fetch emails, parse them, and check for phishing."""[m
[31m-    mail = connect_imap()[m
[31m-    status, messages = mail.searc